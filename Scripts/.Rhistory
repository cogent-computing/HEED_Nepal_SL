summarise(hours=length(Solar.Charger.PV.power.W_original))
onHours <- as.data.frame(onHours[onHours$hours==24,])
full_days <- onHours %>% group_by(streetlight, month2) %>% summarise(days=length(date))
write.csv(full_days, file=here(filepath,"full_days_all_data_nepal.csv"), row.names=FALSE)
# Get typical day values for each SL
# Subset data to get SL, Time, Potential PV, SoC, Actual PV power, Actual Socket load,
# Positive actual Solar battery power (E_a), Positive and negative actual battery power,
# Actual light load
system_sub_interpolation <- na_seadec_correctedData[,c(1,3,14,4,32,33,36,37,39,40,41)]
system_sub_original <- na_seadec_correctedData[,c(1,3,14,5,32,33,36,37,39,40,41)]
system_sub_original <- system_sub_original %>%
mutate(load = abs(Actual.Socket.load.W_interpolation) +
abs(Actual.Light.load.W_interpolation),
loss = Potential.PV.power.W -
Postive.Actual.Solar.Charger.Battery.Power.W_interpolation,
State.of.Charge.W_interpolation=State.of.Charge.W_interpolation*100/1954)
system_sub_original <- system_sub_original[,-c(7,11)] # Remove socket and light load
colnames(system_sub_original) <- c("streetlight","timeUse","E_p", "BM_SoC","SoC",
"PV","E_a","B_cp","B_dp","E_load","L_c")
# Calculate Total load (actual AC + actual light), capture loss (potential-E_a)
system_sub_interpolation <- system_sub_interpolation %>%
mutate(load = abs(Actual.Socket.load.W_interpolation) +
abs(Actual.Light.load.W_interpolation),
loss = Potential.PV.power.W -
Postive.Actual.Solar.Charger.Battery.Power.W_interpolation,
State.of.Charge.W_interpolation=State.of.Charge.W_interpolation*100/1954)
system_sub_interpolation <- system_sub_interpolation[,-c(7,11)] # Remove socket and light load
colnames(system_sub_interpolation) <- c("streetlight","timeUse","E_p", "BM_SoC","SoC",
"PV","E_a","B_cp","B_dp","E_load","L_c")
# Calculate typical values for each SL
system_sub_original <- gather(system_sub_original, id, value, 3:11)
system_typical_original <- system_sub_original %>%
group_by(streetlight, timeUse, id) %>% summarise(value=mean(value, na.rm=TRUE))
system_typical_original <- as.data.frame(system_typical_original)
system_typical_original <- spread(system_typical_original, id, value)
system_sub_interpolation <- gather(system_sub_interpolation, id, value, 3:11)
system_typical_interpolation <- system_sub_interpolation %>%
group_by(streetlight, timeUse, id) %>% summarise(value=mean(value, na.rm=TRUE))
system_typical_interpolation <- as.data.frame(system_typical_interpolation)
system_typical_interpolation <- spread(system_typical_interpolation, id, value)
# Plot typical values for each SL
plotTypical <- function(df) {
ggplot(df, aes(x=timeUse)) + geom_line(aes(y=B_cp/1000.0, color="B_cp", linetype="B_cp")) +
geom_line(aes(y=abs(B_dp)/1000.0, color="B_dp",linetype="B_dp")) +
geom_line(aes(y=E_a/1000.0, color="E_a",linetype="E_a")) +
geom_line(aes(y=E_load/1000.0, color="E_load",linetype="E_load")) +
geom_line(aes(y=E_p/1000.0, color="E_p",linetype="E_p")) +
geom_line(aes(y=L_c/1000.0, color="L_c",linetype="L_c")) +
scale_y_continuous(breaks= seq(0,0.25,0.05), sec.axis = sec_axis(~.*400, name = "State of Charge (%)")) +
labs(y="Energy (kWh)", x = "Time of day", colour="Parameter", linetype="Parameter") +
scale_x_continuous(breaks=seq(0,24,by=2)) + theme(plot.title = element_text(size=10), legend.position = "bottom",
legend.box = "horizontal",  legend.key.size = unit(0.6, "cm"),
legend.margin = margin(t=0,r=0,b=0,l=0),
axis.text = element_text(size=10), axis.title = element_text(size=12))
}
plotTypical(system_typical_interpolation[system_typical_interpolation$streetlight=="SL1",]) +
geom_line(aes(y = BM_SoC/400, color = "SoC",linetype="SoC")) +
labs(title="Actual typical day profile for Nepal SL1 between July 2019 and Mar 2020")
plotTypical(system_typical_interpolation[system_typical_interpolation$streetlight=="SL2",]) +
geom_line(aes(y = BM_SoC/400, color = "SoC",linetype="SoC")) +
labs(title="Actual typical day profile for Nepal SL2 between July 2019 and Mar 2020")
plotTypical(system_typical_interpolation[system_typical_interpolation$streetlight=="SL3",]) +
geom_line(aes(y = BM_SoC/400, color = "SoC",linetype="SoC")) +
labs(title="Actual typical day profile for Nepal SL3 between July 2019 and Mar 2020")
plotTypical(system_typical_interpolation[system_typical_interpolation$streetlight=="SL4",]) +
geom_line(aes(y = BM_SoC/400, color = "SoC",linetype="SoC")) +
labs(title="Actual typical day profile for Nepal SL4 between July 2019 and Mar 2020")
plotTypical(system_typical_interpolation[system_typical_interpolation$streetlight=="SL5",]) +
geom_line(aes(y = BM_SoC/400, color = "SoC",linetype="SoC")) +
labs(title="Actual typical day profile for Nepal SL5 between July 2019 and Aug 2019")
plotTypical(system_typical_interpolation[system_typical_interpolation$streetlight=="SL6",]) +
geom_line(aes(y = BM_SoC/400, color = "SoC",linetype="SoC")) +
labs(title="Actual typical day profile for Nepal SL6 between July 2019 and Mar 2020")
plotTypical(system_typical_interpolation[system_typical_interpolation$streetlight=="SL7",]) +
geom_line(aes(y = SoC/400, color = "SoC",linetype="SoC")) +
labs(title="Actual typical day profile for Nepal SL7 between July 2019 and Mar 2020")
# Calculate daily data - PV power (original and imputed), Socket load (original and imputed),
# Potential PV, actual PV power, actual socket load,
# +ve/-ve solar charger battery watts (original and imputed), +ve/-ve system battery power
# (original and imputed), +ve/-ve actual solar charger battery power,
# +ve/-ve actual battery power, light demand and actual light load
na_seadec_sub <- na_seadec_correctedData[,c(1:3,17,8:9,30:31,14,33,36,18:21,22:25,37:40,28,41)]
# Calculate daily loads
na_seadec_sub <- gather(na_seadec_sub, id, value, c(5:25))
system_daily <- na_seadec_sub %>% group_by(streetlight, month2, date, id) %>%
summarise(value=sum(value, na.rm=TRUE))
system_daily <- as.data.frame(system_daily)
# Calculate daily value of SoC and BM_SoC -  take mean for the day
na_seadec_sub <- na_seadec_correctedData[,c(1:3,17,4:5,32)]
# Calculate daily loads
na_seadec_sub <- gather(na_seadec_sub, id, value, c(5:7))
system_daily_soc <- na_seadec_sub %>% group_by(streetlight, month2, date, id) %>%
summarise(value=mean(value, na.rm=TRUE))
system_daily_soc <- as.data.frame(system_daily_soc)
# Bind data sets
system_daily <- rbind(system_daily, system_daily_soc)
# Save data
system_daily <- spread(system_daily, id, value)
system_daily <- system_daily %>% mutate(State.of.Charge.W_interpolation =
State.of.Charge.W_interpolation*100/1954)
write.csv(system_daily, file=here(filepath,"system_daily_correctedData.csv"), row.names=FALSE)
#*****************************************************************************************#
# Monthly daily avg
system_daily <- gather(system_daily, id, value, 4:27)
system_monthly <- system_daily %>% group_by(streetlight, month2, id) %>%
summarise(value=mean(value, na.rm=TRUE))
system_monthly <- as.data.frame(system_monthly)
# Converting power from W to Wh
system_monthly <- system_monthly %>%
mutate(value=ifelse(id=="Battery.Monitor.State.of.charge.._interpolation" |
id=="Battery.Monitor.State.of.charge.._original" |
id=="State.of.Charge.W_interpolation", value, value/1000.0))
# Consider absolute values for all variables
system_monthly <- system_monthly %>% mutate(value=abs(value))
system_monthly <- spread(system_monthly, id, value)
system_monthly <- system_monthly[order(system_monthly$streetlight, system_monthly$month2),]
View(system_monthly)
write.csv(system_monthly, file=here(filepath,"monthly_avg_correctedData.csv"), row.names=FALSE)
unique(na_seadec_imputedData$streetlight)
unique(na_seadec_imputedData$streetlight)[1]
unique(na_seadec_imputedData$streetlight)[2]
unique(na_seadec_imputedData$streetlight)[3]
unique(na_seadec_imputedData$streetlight)[4]
unique(na_seadec_imputedData$streetlight)[5]
unique(na_seadec_imputedData$streetlight)[6]
unique(na_seadec_imputedData$streetlight)[7]
setwd("~/github-kriti1717/Nepal_SL/HEED_Nepal_SL/Scripts")
#******************************************************************************************#
# Importing libraries
library(tidyverse)
library(lubridate)
library(wesanderson)
library("imputeTS") # for na_seadec imputation
library(xts) # for converting data into time series
library(timeDate)
library(here)
#******************************************************************************************#
# Set working directory
filepath <- "Data"
plot_dir <- "Plots/Paper 7"
#******************************************************************************************#
# Read data and calculate +ve/-ve battery power values
na_seadec_correctedData <- read.csv(here(filepath,"na_seadec_correctedData.csv"), header=TRUE, stringsAsFactors=FALSE)
na_seadec_correctedData <- na_seadec_correctedData %>%
mutate(date=as.Date(date),timestamp=as.POSIXct(timestamp, tz="GMT", origin="1970-01-01"),
month2=factor(month, levels = c("Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "Jan", "Feb", "Mar"),
labels = c("Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "Jan", "Feb", "Mar")))
# Get typical day values for each SL
# Subset data to get SL, Time, Potential PV, SoC, Actual PV power, Actual Socket load,
# Positive actual Solar battery power (E_a), Positive and negative actual battery power,
# Actual light load
system_sub_interpolation <- na_seadec_correctedData[,c(1,3,14,4,32,33,36,37,39,40,41)]
colnames(na_seadec_correctedData)
system_sub_original <- na_seadec_correctedData[,c(1,3,14,5,32,33,36,37,39,40,41)]
sl7 <-  na_seadec_correctedData[,c(1,3,15,14,4,32,33,36,37,39,40,41)]
system_sub_original <- system_sub_original %>%
mutate(load = abs(Actual.Socket.load.W_interpolation) +
abs(Actual.Light.load.W_interpolation),
loss = Potential.PV.power.W -
Postive.Actual.Solar.Charger.Battery.Power.W_interpolation,
State.of.Charge.W_interpolation=State.of.Charge.W_interpolation*100/1954)
system_sub_original <- system_sub_original[,-c(7,11)] # Remove socket and light load
colnames(system_sub_original) <- c("streetlight","timeUse","E_p", "BM_SoC","SoC",
"PV","E_a","B_cp","B_dp","E_load","L_c")
sl7 <- sl7 %>% mutate(load = abs(Actual.Socket.load.W_interpolation) +
abs(Actual.Light.load.W_interpolation),
loss = Potential.PV.power.W -
Postive.Actual.Solar.Charger.Battery.Power.W_interpolation,
State.of.Charge.W_interpolation=State.of.Charge.W_interpolation*100/1954)
system_sub_interpolation <- system_sub_interpolation[,-c(8,12)] # Remove socket and light load
# Calculate Total load (actual AC + actual light), capture loss (potential-E_a)
system_sub_interpolation <- system_sub_interpolation %>%
mutate(load = abs(Actual.Socket.load.W_interpolation) +
abs(Actual.Light.load.W_interpolation),
loss = Potential.PV.power.W -
Postive.Actual.Solar.Charger.Battery.Power.W_interpolation,
State.of.Charge.W_interpolation=State.of.Charge.W_interpolation*100/1954)
# Get typical day values for each SL
# Subset data to get SL, Time, Potential PV, SoC, Actual PV power, Actual Socket load,
# Positive actual Solar battery power (E_a), Positive and negative actual battery power,
# Actual light load
system_sub_interpolation <- na_seadec_correctedData[,c(1,3,14,4,32,33,36,37,39,40,41)]
# Calculate Total load (actual AC + actual light), capture loss (potential-E_a)
system_sub_interpolation <- system_sub_interpolation %>%
mutate(load = abs(Actual.Socket.load.W_interpolation) +
abs(Actual.Light.load.W_interpolation),
loss = Potential.PV.power.W -
Postive.Actual.Solar.Charger.Battery.Power.W_interpolation,
State.of.Charge.W_interpolation=State.of.Charge.W_interpolation*100/1954)
system_sub_interpolation <- system_sub_interpolation[,-c(7,11)] # Remove socket and light load
colnames(system_sub_interpolation) <- c("streetlight","timeUse","E_p", "BM_SoC","SoC",
"PV","E_a","B_cp","B_dp","E_load","L_c")
sl7 <- sl7 %>% mutate(load = abs(Actual.Socket.load.W_interpolation) +
abs(Actual.Light.load.W_interpolation),
loss = Potential.PV.power.W -
Postive.Actual.Solar.Charger.Battery.Power.W_interpolation,
State.of.Charge.W_interpolation=State.of.Charge.W_interpolation*100/1954)
sl7 <- sl7[,-c(8,12)] # Remove socket and light load
colnames(system_sub_interpolation) <- c("streetlight","timeUse","month","E_p", "BM_SoC","SoC",
"PV","E_a","B_cp","B_dp","E_load","L_c")
colnames(sl7) <- c("streetlight","timeUse","month","E_p", "BM_SoC","SoC",
"PV","E_a","B_cp","B_dp","E_load","L_c")
# Calculate typical values for each SL
system_sub_original <- gather(system_sub_original, id, value, 3:11)
system_typical_original <- system_sub_original %>%
group_by(streetlight, timeUse, id) %>% summarise(value=mean(value, na.rm=TRUE))
system_typical_original <- as.data.frame(system_typical_original)
system_typical_original <- spread(system_typical_original, id, value)
system_sub_interpolation <- gather(system_sub_interpolation, id, value, 3:11)
system_typical_interpolation <- system_sub_interpolation %>%
group_by(streetlight, timeUse, id) %>% summarise(value=mean(value, na.rm=TRUE))
system_typical_interpolation <- as.data.frame(system_typical_interpolation)
system_typical_interpolation <- spread(system_typical_interpolation, id, value)
sl7 <- gather(sl7, id, value,4:12)
sl7 <- sl7 %>% group_by(streetlight, month, timeUse, id) %>%
summarise(value=mean(value, na.rm=TRUE))
sl7 <- as.data.frame(sl7)
# Plot typical values for each SL
plotTypical <- function(df) {
ggplot(df, aes(x=timeUse)) + geom_line(aes(y=B_cp/1000.0, color="B_cp", linetype="B_cp")) +
geom_line(aes(y=abs(B_dp)/1000.0, color="B_dp",linetype="B_dp")) +
geom_line(aes(y=E_a/1000.0, color="E_a",linetype="E_a")) +
geom_line(aes(y=E_load/1000.0, color="E_load",linetype="E_load")) +
geom_line(aes(y=E_p/1000.0, color="E_p",linetype="E_p")) +
geom_line(aes(y=L_c/1000.0, color="L_c",linetype="L_c")) +
scale_y_continuous(breaks= seq(0,0.25,0.05), sec.axis = sec_axis(~.*400, name = "State of Charge (%)")) +
labs(y="Energy (kWh)", x = "Time of day", colour="Parameter", linetype="Parameter") +
scale_x_continuous(breaks=seq(0,24,by=2)) + theme(plot.title = element_text(size=10), legend.position = "bottom",
legend.box = "horizontal",  legend.key.size = unit(0.6, "cm"),
legend.margin = margin(t=0,r=0,b=0,l=0),
axis.text = element_text(size=10), axis.title = element_text(size=12))
}
plotTypical(system_typical_interpolation[system_typical_interpolation$streetlight=="SL1",]) +
geom_line(aes(y = BM_SoC/400, color = "SoC",linetype="SoC")) +
labs(title="Actual typical day profile for Nepal SL1 between July 2019 and Mar 2020")
sl7 <-  na_seadec_correctedData[na_seadec_correctedData$streetlight=="SL7",
c(1,3,15,14,4,32,33,36,37,39,40,41)]
sl7 <- sl7 %>% mutate(load = abs(Actual.Socket.load.W_interpolation) +
abs(Actual.Light.load.W_interpolation),
loss = Potential.PV.power.W -
Postive.Actual.Solar.Charger.Battery.Power.W_interpolation,
State.of.Charge.W_interpolation=State.of.Charge.W_interpolation*100/1954)
sl7 <- sl7[,-c(8,12)] # Remove socket and light load
colnames(sl7) <- c("streetlight","timeUse","month","E_p", "BM_SoC","SoC",
"PV","E_a","B_cp","B_dp","E_load","L_c")
sl7 <-  na_seadec_correctedData[na_seadec_correctedData$streetlight=="SL7",
c(1,3,15,14,4,32,33,36,37,39,40,41)]
sl7 <- sl7 %>% mutate(load = abs(Actual.Socket.load.W_interpolation) +
abs(Actual.Light.load.W_interpolation),
loss = Potential.PV.power.W -
Postive.Actual.Solar.Charger.Battery.Power.W_interpolation,
State.of.Charge.W_interpolation=State.of.Charge.W_interpolation*100/1954)
sl7 <- sl7[,-c(8,12)] # Remove socket and light load
colnames(sl7) <- c("streetlight","timeUse","month","E_p", "BM_SoC","SoC",
"PV","E_a","B_cp","B_dp","E_load","L_c")
sl7 <- gather(sl7, id, value, 4:12)
sl7 <- sl7 %>% group_by(streetlight, month, timeUse, id) %>%
summarise(value=mean(value, na.rm=TRUE))
sl7 <- as.data.frame(sl7)
sl7 <- spread(sl7, id, value)
# Plot typical values for each SL
plotTypical <- function(df) {
ggplot(df, aes(x=timeUse)) + geom_line(aes(y=B_cp/1000.0, color="B_cp", linetype="B_cp")) +
geom_line(aes(y=abs(B_dp)/1000.0, color="B_dp",linetype="B_dp")) +
geom_line(aes(y=E_a/1000.0, color="E_a",linetype="E_a")) +
geom_line(aes(y=E_load/1000.0, color="E_load",linetype="E_load")) +
geom_line(aes(y=E_p/1000.0, color="E_p",linetype="E_p")) +
geom_line(aes(y=L_c/1000.0, color="L_c",linetype="L_c")) +
scale_y_continuous(breaks= seq(0,0.25,0.05), sec.axis = sec_axis(~.*400, name = "State of Charge (%)")) +
labs(y="Energy (kWh)", x = "Time of day", colour="Parameter", linetype="Parameter") +
scale_x_continuous(breaks=seq(0,24,by=2)) + theme(plot.title = element_text(size=10), legend.position = "bottom",
legend.box = "horizontal",  legend.key.size = unit(0.6, "cm"),
legend.margin = margin(t=0,r=0,b=0,l=0),
axis.text = element_text(size=10), axis.title = element_text(size=12))
}
plotTypical(sl7[sl7$month=="Jul",]) +
geom_line(aes(y = SoC/400, color = "SoC",linetype="SoC")) +
labs(title="Actual typical day profile for Nepal SL7 in July 2019")
plotTypical(sl7[sl7$month=="Aug",]) +
geom_line(aes(y = SoC/400, color = "SoC",linetype="SoC")) +
labs(title="Actual typical day profile for Nepal SL7 in Aug 2019")
plotTypical(sl7[sl7$month=="Sep",]) +
geom_line(aes(y = SoC/400, color = "SoC",linetype="SoC")) +
labs(title="Actual typical day profile for Nepal SL7 in Sep 2019")
plotTypical(sl7[sl7$month=="Oct",]) +
geom_line(aes(y = SoC/400, color = "SoC",linetype="SoC")) +
labs(title="Actual typical day profile for Nepal SL7 in Oct 2019")
# Get typical day values for each SL
# Subset data to get SL, Time, Potential PV, SoC, Actual PV power, Actual Socket load,
# Positive actual Solar battery power (E_a), Positive and negative actual battery power,
# Actual light load
system_sub_interpolation <- na_seadec_correctedData[,c(1,3,15,14,4,32,33,36,37,39,40,41)]
system_sub_original <- na_seadec_correctedData[,c(1,3,15,14,5,32,33,36,37,39,40,41)]
colnames(system_sub_interpolation)
system_sub_original <- system_sub_original %>%
mutate(load = abs(Actual.Socket.load.W_interpolation) +
abs(Actual.Light.load.W_interpolation),
loss = Potential.PV.power.W -
Postive.Actual.Solar.Charger.Battery.Power.W_interpolation,
State.of.Charge.W_interpolation=State.of.Charge.W_interpolation*100/1954)
colnames(system_sub_interpolation)
system_sub_original <- system_sub_original[,-c(8,12)] # Remove socket and light load
colnames(system_sub_interpolation)
# Get typical day values for each SL
# Subset data to get SL, Time, Potential PV, SoC, Actual PV power, Actual Socket load,
# Positive actual Solar battery power (E_a), Positive and negative actual battery power,
# Actual light load
system_sub_interpolation <- na_seadec_correctedData[,c(1,3,15,14,4,32,33,36,37,39,40,41)]
system_sub_original <- na_seadec_correctedData[,c(1,3,15,14,5,32,33,36,37,39,40,41)]
system_sub_original <- system_sub_original %>%
mutate(load = abs(Actual.Socket.load.W_interpolation) +
abs(Actual.Light.load.W_interpolation),
loss = Potential.PV.power.W -
Postive.Actual.Solar.Charger.Battery.Power.W_interpolation,
State.of.Charge.W_interpolation=State.of.Charge.W_interpolation*100/1954)
colnames(system_sub_interpolation)
system_sub_original <- system_sub_original[,-c(8,12)] # Remove socket and light load
colnames(system_sub_interpolation)
system_sub_original <- system_sub_original %>%
mutate(load = abs(Actual.Socket.load.W_interpolation) +
abs(Actual.Light.load.W_interpolation),
loss = Potential.PV.power.W -
Postive.Actual.Solar.Charger.Battery.Power.W_interpolation,
State.of.Charge.W_interpolation=State.of.Charge.W_interpolation*100/1954)
# Get typical day values for each SL
# Subset data to get SL, Time, Potential PV, SoC, Actual PV power, Actual Socket load,
# Positive actual Solar battery power (E_a), Positive and negative actual battery power,
# Actual light load
system_sub_interpolation <- na_seadec_correctedData[,c(1,3,15,14,4,32,33,36,37,39,40,41)]
system_sub_original <- na_seadec_correctedData[,c(1,3,15,14,5,32,33,36,37,39,40,41)]
system_sub_original <- system_sub_original %>%
mutate(load = abs(Actual.Socket.load.W_interpolation) +
abs(Actual.Light.load.W_interpolation),
loss = Potential.PV.power.W -
Postive.Actual.Solar.Charger.Battery.Power.W_interpolation,
State.of.Charge.W_interpolation=State.of.Charge.W_interpolation*100/1954)
colnames(system_sub_original)
system_sub_original <- system_sub_original[,-c(8,12)] # Remove socket and light load
colnames(system_sub_original)
colnames(system_sub_original) <- c("streetlight","timeUse","month","E_p", "BM_SoC","SoC",
"PV","E_a","B_cp","B_dp","E_load","L_c")
# Calculate Total load (actual AC + actual light), capture loss (potential-E_a)
system_sub_interpolation <- system_sub_interpolation %>%
mutate(load = abs(Actual.Socket.load.W_interpolation) +
abs(Actual.Light.load.W_interpolation),
loss = Potential.PV.power.W -
Postive.Actual.Solar.Charger.Battery.Power.W_interpolation,
State.of.Charge.W_interpolation=State.of.Charge.W_interpolation*100/1954)
colnames(system_sub_interpolation)
system_sub_interpolation <- system_sub_interpolation[,-c(8,12)] # Remove socket & light load
colnames(system_sub_interpolation)
colnames(system_sub_interpolation) <- c("streetlight","timeUse","month","E_p", "BM_SoC","SoC",
"PV","E_a","B_cp","B_dp","E_load","L_c")
colnames(system_sub_original)
# Calculate typical values for each SL
system_sub_original <- gather(system_sub_original, id, value, 4:12)
# Get typical day values for each SL
# Subset data to get SL, Time, Potential PV, SoC, Actual PV power, Actual Socket load,
# Positive actual Solar battery power (E_a), Positive and negative actual battery power,
# Actual light load
system_sub_interpolation <- na_seadec_correctedData[,c(1,3,15,14,4,32,33,36,37,39,40,41)]
system_sub_original <- na_seadec_correctedData[,c(1,3,15,14,5,32,33,36,37,39,40,41)]
system_sub_original <- system_sub_original %>%
mutate(load = abs(Actual.Socket.load.W_interpolation) +
abs(Actual.Light.load.W_interpolation),
loss = Potential.PV.power.W -
Postive.Actual.Solar.Charger.Battery.Power.W_interpolation,
State.of.Charge.W_interpolation=State.of.Charge.W_interpolation*100/1954)
system_sub_original <- system_sub_original[,-c(8,12)] # Remove socket and light load
colnames(system_sub_original) <- c("streetlight","timeUse","month","E_p", "BM_SoC","SoC",
"PV","E_a","B_cp","B_dp","E_load","L_c")
# Calculate Total load (actual AC + actual light), capture loss (potential-E_a)
system_sub_interpolation <- system_sub_interpolation %>%
mutate(load = abs(Actual.Socket.load.W_interpolation) +
abs(Actual.Light.load.W_interpolation),
loss = Potential.PV.power.W -
Postive.Actual.Solar.Charger.Battery.Power.W_interpolation,
State.of.Charge.W_interpolation=State.of.Charge.W_interpolation*100/1954)
system_sub_interpolation <- system_sub_interpolation[,-c(8,12)] # Remove socket & light load
colnames(system_sub_interpolation) <- c("streetlight","timeUse","month","E_p", "BM_SoC","SoC",
"PV","E_a","B_cp","B_dp","E_load","L_c")
# Remove months July to Sep for SL7
system_sub_interpolation <-
system_sub_interpolation[!(system_sub_interpolation$streetlight=="SL7" &
system_sub_interpolation$month=="Jul" |
system_sub_interpolation$month=="Aug" |
system_sub_interpolation$month=="Sep"),]
View(system_sub_interpolation)
View(system_sub_interpolation)
# Get typical day values for each SL
# Subset data to get SL, Time, Potential PV, SoC, Actual PV power, Actual Socket load,
# Positive actual Solar battery power (E_a), Positive and negative actual battery power,
# Actual light load
system_sub_interpolation <- na_seadec_correctedData[,c(1,3,15,14,4,32,33,36,37,39,40,41)]
system_sub_original <- na_seadec_correctedData[,c(1,3,15,14,5,32,33,36,37,39,40,41)]
system_sub_original <- system_sub_original %>%
mutate(load = abs(Actual.Socket.load.W_interpolation) +
abs(Actual.Light.load.W_interpolation),
loss = Potential.PV.power.W -
Postive.Actual.Solar.Charger.Battery.Power.W_interpolation,
State.of.Charge.W_interpolation=State.of.Charge.W_interpolation*100/1954)
system_sub_original <- system_sub_original[,-c(8,12)] # Remove socket and light load
colnames(system_sub_original) <- c("streetlight","timeUse","month","E_p", "BM_SoC","SoC",
"PV","E_a","B_cp","B_dp","E_load","L_c")
# Calculate Total load (actual AC + actual light), capture loss (potential-E_a)
system_sub_interpolation <- system_sub_interpolation %>%
mutate(load = abs(Actual.Socket.load.W_interpolation) +
abs(Actual.Light.load.W_interpolation),
loss = Potential.PV.power.W -
Postive.Actual.Solar.Charger.Battery.Power.W_interpolation,
State.of.Charge.W_interpolation=State.of.Charge.W_interpolation*100/1954)
system_sub_interpolation <- system_sub_interpolation[,-c(8,12)] # Remove socket & light load
colnames(system_sub_interpolation) <- c("streetlight","timeUse","month","E_p", "BM_SoC","SoC",
"PV","E_a","B_cp","B_dp","E_load","L_c")
test <- system_sub_interpolation[system_sub_interpolation$streetlight=="SL7",]
unique(system_sub_interpolation$streetlight)
unique(system_sub_interpolation$month)
unique(test$streetlight)
unique(test$month)
# Remove months July to Sep for SL7
system_sub_interpolation <-
system_sub_interpolation[!(system_sub_interpolation$streetlight=="SL7" &
(system_sub_interpolation$month=="Jul" |
system_sub_interpolation$month=="Aug" |
system_sub_interpolation$month=="Sep")),]
# Remove months July to Sep for SL7
system_sub_original <-
system_sub_original[!(system_sub_original$streetlight=="SL7" &
(system_sub_original$month=="Jul" |
system_sub_original$month=="Aug" |
system_sub_original$month=="Sep")),]
# Calculate typical values for each SL
system_sub_original <- gather(system_sub_original, id, value, 4:12)
system_typical_original <- system_sub_original %>%
group_by(streetlight, timeUse, id) %>% summarise(value=mean(value, na.rm=TRUE))
system_typical_original <- as.data.frame(system_typical_original)
system_typical_original <- spread(system_typical_original, id, value)
system_sub_interpolation <- gather(system_sub_interpolation, id, value, 4:12)
system_typical_interpolation <- system_sub_interpolation %>%
group_by(streetlight, timeUse, id) %>% summarise(value=mean(value, na.rm=TRUE))
system_typical_interpolation <- as.data.frame(system_typical_interpolation)
system_typical_interpolation <- spread(system_typical_interpolation, id, value)
# Plot typical values for each SL
plotTypical <- function(df) {
ggplot(df, aes(x=timeUse)) + geom_line(aes(y=B_cp/1000.0, color="B_cp", linetype="B_cp")) +
geom_line(aes(y=abs(B_dp)/1000.0, color="B_dp",linetype="B_dp")) +
geom_line(aes(y=E_a/1000.0, color="E_a",linetype="E_a")) +
geom_line(aes(y=E_load/1000.0, color="E_load",linetype="E_load")) +
geom_line(aes(y=E_p/1000.0, color="E_p",linetype="E_p")) +
geom_line(aes(y=L_c/1000.0, color="L_c",linetype="L_c")) +
scale_y_continuous(breaks= seq(0,0.25,0.05), sec.axis = sec_axis(~.*400, name = "State of Charge (%)")) +
labs(y="Energy (kWh)", x = "Time of day", colour="Parameter", linetype="Parameter") +
scale_x_continuous(breaks=seq(0,24,by=2)) + theme(plot.title = element_text(size=10), legend.position = "bottom",
legend.box = "horizontal",  legend.key.size = unit(0.6, "cm"),
legend.margin = margin(t=0,r=0,b=0,l=0),
axis.text = element_text(size=10), axis.title = element_text(size=12))
}
plotTypical(system_typical_interpolation[system_typical_interpolation$streetlight=="SL1",]) +
geom_line(aes(y = BM_SoC/400, color = "SoC",linetype="SoC")) +
labs(title="Actual typical day profile for Nepal SL1 between July 2019 and Mar 2020")
plotTypical(system_typical_interpolation[system_typical_interpolation$streetlight=="SL2",]) +
geom_line(aes(y = BM_SoC/400, color = "SoC",linetype="SoC")) +
labs(title="Actual typical day profile for Nepal SL2 between July 2019 and Mar 2020")
plotTypical(system_typical_interpolation[system_typical_interpolation$streetlight=="SL3",]) +
geom_line(aes(y = BM_SoC/400, color = "SoC",linetype="SoC")) +
labs(title="Actual typical day profile for Nepal SL3 between July 2019 and Mar 2020")
plotTypical(system_typical_interpolation[system_typical_interpolation$streetlight=="SL4",]) +
geom_line(aes(y = BM_SoC/400, color = "SoC",linetype="SoC")) +
labs(title="Actual typical day profile for Nepal SL4 between July 2019 and Mar 2020")
plotTypical(system_typical_interpolation[system_typical_interpolation$streetlight=="SL5",]) +
geom_line(aes(y = BM_SoC/400, color = "SoC",linetype="SoC")) +
labs(title="Actual typical day profile for Nepal SL5 between July 2019 and Aug 2019")
plotTypical(system_typical_interpolation[system_typical_interpolation$streetlight=="SL6",]) +
geom_line(aes(y = BM_SoC/400, color = "SoC",linetype="SoC")) +
labs(title="Actual typical day profile for Nepal SL6 between July 2019 and Mar 2020")
plotTypical(system_typical_interpolation[system_typical_interpolation$streetlight=="SL7",]) +
geom_line(aes(y = SoC/400, color = "SoC",linetype="SoC")) +
labs(title="Actual typical day profile for Nepal SL7 between Oct 2019 and Mar 2020")
setwd("~/github-kriti1717/Nepal_SL/HEED_Nepal_SL/Scripts")
#******************************************************************************************#
# Importing libraries
library(tidyverse)
library(lubridate)
library(wesanderson)
library("imputeTS") # for na_seadec imputation
library(xts) # for converting data into time series
library(timeDate)
library(here)
#******************************************************************************************#
# Set working directory
filepath <- "Data"
plot_dir <- "Plots/Paper 7"
#******************************************************************************************#
# Read hourly data and subset data to choose only columns we need to impute
system_hourly <- read.csv(here(filepath,"raw_hourly_sl_data.csv"), header = TRUE, stringsAsFactors=FALSE)
system_hourly <- system_hourly %>% mutate(date = as.Date(date))
system_hourly <- system_hourly[!(system_hourly$streetlight=="SL5" & system_hourly$date>="2019-09-01"),]
#******************************************************************************************#
# Imputation using na_seadec owing to seasonality - works on univariate time series
#methodImpute <- c("interpolation", "kalman")
methodImpute <- c("interpolation")
# Impute missing values for SoC, Charged energy, Discharged energy, Battery watts, Load current, PV power, Battery power
variables <- c("Battery.Monitor.State.of.charge..", "Solar.Charger.Battery.watts.W",
"Solar.Charger.PV.power.W","System.overview.Battery.Power.W", "System.overview.PV...DC.coupled.W")
na_seadec_imputedData <- data.frame()
k=1
i=1
x <- system_hourly[c("streetlight","date","timeUse",variables[k])]
df <- x[x$streetlight == unique(x$streetlight)[i], ]
# Convert data frame into a time series using xts to serve as input to na_seadec function
# For this data, seasonality is 1 day with a reading every hour
df.ts <- df[,-1]
