timestamp = as.POSIXct(time, tz="Africa/Kigali", origin="1970-01-01"),
DATE = date(timestamp)))
sum_total <- sum_total %>% group_by(id) %>%
mutate(smoothedTemp = smooth.spline(time, y=thermocoupleTemp, cv=TRUE)$y,
temp_diff = c(0, diff(smoothedTemp)),
temp_rate = c(0, diff(smoothedTemp)/(diff(time)/60)))
sum_total <- sum_total %>%
mutate(cluster1 = kmeans(sum_total[,2], 2)$cluster,
inUse1 = ifelse((mean(thermocoupleTemp[cluster1==1]) > mean(thermocoupleTemp[cluster1==2]) &
cluster1==1) |
(mean(thermocoupleTemp[cluster1==2]) > mean(thermocoupleTemp[cluster1==1]) &
cluster1==2), TRUE, FALSE))
cluster <- kmeans(sum_total[,2], 2)
cluster <- kmeans(sum_total[,2], 2)$cluster
colnames(sum_total)
sum_total <- map_dfr(file_list, ~ read_csv(here(filepath,.x), col_names = TRUE) %>%
mutate(id = gsub("\\..*","",.x),
timestamp = as.POSIXct(time, tz="Africa/Kigali", origin="1970-01-01"),
DATE = date(timestamp)))
sum_total <- sum_total %>% group_by(id) %>%
mutate(smoothedTemp = smooth.spline(time, y=thermocoupleTemp, cv=TRUE)$y,
temp_diff = c(0, diff(smoothedTemp)),
temp_rate = c(0, diff(smoothedTemp)/(diff(time)/60)))
# K-means using smoothed thermocouple data
cluster <- kmeans(sum_total[,11], 2)$cluster
sum_total <- sum_total %>%
mutate(cluster1 = cluster,
inUse1 = ifelse((mean(thermocoupleTemp[cluster1==1]) > mean(thermocoupleTemp[cluster1==2]) &
cluster1==1) |
(mean(thermocoupleTemp[cluster1==2]) > mean(thermocoupleTemp[cluster1==1]) &
cluster1==2), TRUE, FALSE))
sum_total <- map_dfr(file_list, ~ read_csv(here(filepath,.x), col_names = TRUE) %>%
mutate(id = gsub("\\..*","",.x),
timestamp = as.POSIXct(time, tz="Africa/Kigali", origin="1970-01-01"),
DATE = date(timestamp)))
sum_total <- sum_total %>% group_by(id) %>%
mutate(smoothedTemp = smooth.spline(time, y=thermocoupleTemp, cv=TRUE)$y,
temp_diff = c(0, diff(smoothedTemp)),
temp_rate = c(0, diff(smoothedTemp)/(diff(time)/60)))
sum_total <- as.data.frame(sum_total)
# K-means using smoothed thermocouple data
cluster <- kmeans(sum_total[,11], 2)$cluster
sum_total <- sum_total %>% mutate(cluster1 = cluster,
inUse1 = ifelse((mean(thermocoupleTemp[cluster1==1]) > mean(thermocoupleTemp[cluster1==2]) &
cluster1==1) |
(mean(thermocoupleTemp[cluster1==2]) > mean(thermocoupleTemp[cluster1==1]) &
cluster1==2), TRUE, FALSE))
sum_total <- map_dfr(file_list, ~ read_csv(here(filepath,.x), col_names = TRUE) %>%
mutate(id = gsub("\\..*","",.x),
timestamp = as.POSIXct(time, tz="Africa/Kigali", origin="1970-01-01"),
DATE = date(timestamp)))
sum_total <- sum_total %>% group_by(id) %>%
mutate(smoothedTemp = smooth.spline(time, y=thermocoupleTemp, cv=TRUE)$y,
temp_diff = c(0, diff(smoothedTemp)),
temp_rate = c(0, diff(smoothedTemp)/(diff(time)/60)))
sum_total <- as.data.frame(sum_total)
# K-means using smoothed thermocouple data
cluster <- kmeans(sum_total[,11], 2)$cluster
sum_total <- sum_total %>% mutate(cluster1 = cluster,
inUse1 = ifelse((mean(thermocoupleTemp[cluster1==1]) > mean(thermocoupleTemp[cluster1==2]) &
cluster1==1) |
(mean(thermocoupleTemp[cluster1==2]) > mean(thermocoupleTemp[cluster1==1]) &
cluster1==2), TRUE, FALSE))
colnames(sum_total)
# K-means using smoothed thermocouple data and rate of change
cluster <- kmeans(sum_total[,c(11,13)], 2)$cluster
sum_total <- sum_total %>% mutate(cluster2 = cluster,
inUse2 = ifelse((mean(thermocoupleTemp[cluster2==1]) > mean(thermocoupleTemp[cluster2==2]) &
cluster2==1) |
(mean(thermocoupleTemp[cluster2==2]) > mean(thermocoupleTemp[cluster2==1]) &
cluster2==2), TRUE, FALSE))
# K-means using smoothed thermocouple data and diff between consecutive values
cluster <- kmeans(sum_total[,c(11,12)], 2)$cluster
sum_total <- sum_total %>% mutate(cluster3 = cluster,
inUse3 = ifelse((mean(thermocoupleTemp[cluster3==1]) > mean(thermocoupleTemp[cluster3==2]) &
cluster3==1) |
(mean(thermocoupleTemp[cluster3==2]) > mean(thermocoupleTemp[cluster3==1]) &
cluster3==2), TRUE, FALSE))
# K-means using smoothed thermocouple data, rate of change and diff between consecutive values
cluster <- kmeans(sum_total[,c(11,12, 13)], 2)$cluster
sum_total <- sum_total %>% mutate(cluster4 = cluster,
inUse4 = ifelse((mean(thermocoupleTemp[cluster4=1]) > mean(thermocoupleTemp[cluster4==2]) &
cluster4==1) |
(mean(thermocoupleTemp[cluster4==2]) > mean(thermocoupleTemp[cluster4==1]) &
cluster4==2), TRUE, FALSE))
sum_sub_id <- sum_total[sum_total$id=="SUM_17" & sum_total$DATE=="2019-10-04", ]
# Get timestamp where state change has been detected
indexes1 <- sum_sub_id$timestamp[which(sum_sub_id$inUse1 != lag(sum_sub_id$inUse1))]
indexes2 <- sum_sub_id$timestamp[which(sum_sub_id$inUse2 != lag(sum_sub_id$inUse2))]
indexes3 <- sum_sub_id$timestamp[which(sum_sub_id$inUse3 != lag(sum_sub_id$inUse3))]
indexes4 <- sum_sub_id$timestamp[which(sum_sub_id$inUse4 != lag(sum_sub_id$inUse4))]
ggplot(sum_sub_id, aes(x=timestamp)) + geom_line(aes(y=thermocoupleTemp, color="Raw", linetype="Raw")) +
geom_line(aes(y=smoothedTemp, color="Smoothed",linetype="Smoothed")) +
geom_vline(xintercept=indexes, linetype="dashed") +
labs(y="Temperature (Celsius)", x = "Time of day", colour="Temperature", linetype="Temperature",
caption="Raw and smoothed thermocouple data for SUM 17 marked with instances of stove use on a random day of study") + scale_y_continuous(breaks=SCALE_THERM) + THEME
ggplot(sum_sub_id, aes(x=timestamp)) + geom_line(aes(y=thermocoupleTemp, color="Raw", linetype="Raw")) +
geom_line(aes(y=smoothedTemp, color="Smoothed",linetype="Smoothed")) +
geom_vline(xintercept=indexes1, linetype="dashed", color="blue") +
geom_vline(xintercept=indexes2, linetype="dashed", color="green") +
geom_vline(xintercept=indexes3, linetype="dashed", color="purple") +
geom_vline(xintercept=indexes4, linetype="dashed", color="pink") +
labs(y="Temperature (Celsius)", x = "Time of day", colour="Temperature", linetype="Temperature",
caption="Raw and smoothed thermocouple data for SUM 17 marked with instances of stove use on a random day of study") + scale_y_continuous(breaks=SCALE_THERM) + THEME
ggplot(sum_4, aes(x=inUse1, y=thermocoupleTemp, fill=inUse1)) + geom_boxplot() +
THEME + labs(y="Temperature (Celsius)", x = "Stove in use", fill="Stove in use",
caption="The range of thermocouple temperature for the two activity states across all SUM") +
scale_y_continuous(breaks = SCALE_THERM)
ggplot(sum_total, aes(x=inUse1, y=thermocoupleTemp, fill=inUse1)) + geom_boxplot() +
THEME + labs(y="Temperature (Celsius)", x = "Stove in use", fill="Stove in use",
caption="The range of thermocouple temperature for the two activity states across all SUM") +
scale_y_continuous(breaks = SCALE_THERM)
ggplot(sum_total, aes(x=inUse2, y=thermocoupleTemp, fill=inUse2)) + geom_boxplot() +
THEME + labs(y="Temperature (Celsius)", x = "Stove in use", fill="Stove in use",
caption="The range of thermocouple temperature for the two activity states across all SUM") +
scale_y_continuous(breaks = SCALE_THERM)
ggplot(sum_total, aes(x=inUse1, y=thermocoupleTemp, fill=inUse1)) + geom_boxplot() +
THEME + labs(y="Temperature (Celsius)", x = "Stove in use", fill="Stove in use",
caption="The range of thermocouple temperature for the two activity states across all SUM") +
scale_y_continuous(breaks = SCALE_THERM)
ggplot(sum_total, aes(x=inUse2, y=thermocoupleTemp, fill=inUse2)) + geom_boxplot() +
THEME + labs(y="Temperature (Celsius)", x = "Stove in use", fill="Stove in use",
caption="The range of thermocouple temperature for the two activity states across all SUM") +
scale_y_continuous(breaks = SCALE_THERM)
ggplot(sum_total, aes(x=inUse3, y=thermocoupleTemp, fill=inUse3)) + geom_boxplot() +
THEME + labs(y="Temperature (Celsius)", x = "Stove in use", fill="Stove in use",
caption="The range of thermocouple temperature for the two activity states across all SUM") +
scale_y_continuous(breaks = SCALE_THERM)
ggplot(sum_total, aes(x=inUse4, y=thermocoupleTemp, fill=inUse4)) + geom_boxplot() +
THEME + labs(y="Temperature (Celsius)", x = "Stove in use", fill="Stove in use",
caption="The range of thermocouple temperature for the two activity states across all SUM") +
scale_y_continuous(breaks = SCALE_THERM)
ggplot(sum_total, aes(x=thermocoupleTemp)) + geom_density(aes(color=inUse1)) +
labs(x="Temperature (Celsius)", y = "Probability density", color="Stove in use",
"Density distribution of thermocouple temperature for the two activity states across all SUM") +
geom_vline(aes(xintercept=mean(thermocoupleTemp[inUse==FALSE])), color="red",
linetype="dashed") + geom_vline(aes(xintercept=mean(thermocoupleTemp[inUse==TRUE])),
color="turquoise", linetype="dashed") + THEME +
scale_x_continuous(breaks=SCALE_THERM)
ggplot(sum_total, aes(x=thermocoupleTemp)) + geom_density(aes(color=inUse1)) +
labs(x="Temperature (Celsius)", y = "Probability density", color="Stove in use",
"Density distribution of thermocouple temperature for the two activity states across all SUM") +
geom_vline(aes(xintercept=mean(thermocoupleTemp[inUse1==FALSE])), color="red",
linetype="dashed") + geom_vline(aes(xintercept=mean(thermocoupleTemp[inUse1==TRUE])),
color="turquoise", linetype="dashed") + THEME +
scale_x_continuous(breaks=SCALE_THERM)
ggplot(sum_total, aes(x=thermocoupleTemp)) + geom_density(aes(color=inUse1)) +
labs(x="Temperature (Celsius)", y = "Probability density", color="Stove in use",
caption="Density distribution of thermocouple temperature for the two activity states across all SUM") +
geom_vline(aes(xintercept=mean(thermocoupleTemp[inUse1==FALSE])), color="red",
linetype="dashed") + geom_vline(aes(xintercept=mean(thermocoupleTemp[inUse1==TRUE])),
color="turquoise", linetype="dashed") + THEME +
scale_x_continuous(breaks=SCALE_THERM)
ggplot(sum_total, aes(x=thermocoupleTemp)) + geom_density(aes(color=inUse2)) +
labs(x="Temperature (Celsius)", y = "Probability density", color="Stove in use",
caption="Density distribution of thermocouple temperature for the two activity states across all SUM") +
geom_vline(aes(xintercept=mean(thermocoupleTemp[inUse2==FALSE])), color="red",
linetype="dashed") + geom_vline(aes(xintercept=mean(thermocoupleTemp[inUse2==TRUE])),
color="turquoise", linetype="dashed") + THEME +
scale_x_continuous(breaks=SCALE_THERM)
ggplot(sum_total, aes(x=thermocoupleTemp)) + geom_density(aes(color=inUse1)) +
labs(x="Temperature (Celsius)", y = "Probability density", color="Stove in use",
caption="Density distribution of thermocouple temperature for the two activity states across all SUM") +
geom_vline(aes(xintercept=mean(thermocoupleTemp[inUse1==FALSE])), color="red",
linetype="dashed") + geom_vline(aes(xintercept=mean(thermocoupleTemp[inUse1==TRUE])),
color="turquoise", linetype="dashed") + THEME +
scale_x_continuous(breaks=SCALE_THERM)
ggplot(sum_total, aes(x=thermocoupleTemp)) + geom_density(aes(color=inUse3)) +
labs(x="Temperature (Celsius)", y = "Probability density", color="Stove in use",
caption="Density distribution of thermocouple temperature for the two activity states across all SUM") +
geom_vline(aes(xintercept=mean(thermocoupleTemp[inUse3==FALSE])), color="red",
linetype="dashed") + geom_vline(aes(xintercept=mean(thermocoupleTemp[inUse3==TRUE])),
color="turquoise", linetype="dashed") + THEME +
scale_x_continuous(breaks=SCALE_THERM)
ggplot(sum_total, aes(x=inUse,y=si7021Temp, fill=inUse1)) + geom_boxplot() + THEME +
labs(y="Temperature (Celsius)", x = "Stove in use", fill="Stove in use",
caption="The range of Si7021 temperature data for the two activity states across all SUM") +
scale_y_continuous(breaks = SCALE_Si7021, limits=c(0,100))
ggplot(sum_total, aes(x=inUse1, y=si7021Temp, fill=inUse1)) + geom_boxplot() + THEME +
labs(y="Temperature (Celsius)", x = "Stove in use", fill="Stove in use",
caption="The range of Si7021 temperature data for the two activity states across all SUM") +
scale_y_continuous(breaks = SCALE_Si7021, limits=c(0,100))
ggplot(sum_total, aes(x=inUse2, y=si7021Temp, fill=inUse1)) + geom_boxplot() + THEME +
labs(y="Temperature (Celsius)", x = "Stove in use", fill="Stove in use",
caption="The range of Si7021 temperature data for the two activity states across all SUM") +
scale_y_continuous(breaks = SCALE_Si7021, limits=c(0,100))
ggplot(sum_total, aes(x=inUse2, y=si7021Temp, fill=inUse2)) + geom_boxplot() + THEME +
labs(y="Temperature (Celsius)", x = "Stove in use", fill="Stove in use",
caption="The range of Si7021 temperature data for the two activity states across all SUM") +
scale_y_continuous(breaks = SCALE_Si7021, limits=c(0,100))
ggplot(sum_total, aes(x=inUse1, y=si7021Temp, fill=inUse1)) + geom_boxplot() + THEME +
labs(y="Temperature (Celsius)", x = "Stove in use", fill="Stove in use",
caption="The range of Si7021 temperature data for the two activity states across all SUM") +
scale_y_continuous(breaks = SCALE_Si7021, limits=c(0,100))
ggplot(sum_total, aes(x=inUse3, y=si7021Temp, fill=inUse3)) + geom_boxplot() + THEME +
labs(y="Temperature (Celsius)", x = "Stove in use", fill="Stove in use",
caption="The range of Si7021 temperature data for the two activity states across all SUM") +
scale_y_continuous(breaks = SCALE_Si7021, limits=c(0,100))
ggplot(sum_total, aes(x=inUse4, y=si7021Temp, fill=inUse4)) + geom_boxplot() + THEME +
labs(y="Temperature (Celsius)", x = "Stove in use", fill="Stove in use",
caption="The range of Si7021 temperature data for the two activity states across all SUM") +
scale_y_continuous(breaks = SCALE_Si7021, limits=c(0,100))
# Check for all 4 cases
ggplot(sum_total, aes(x=si7021Temp)) + geom_density(aes(color=inUse1)) + THEME +
labs(x="Temperature (Celsius)", y = "Probability density", color="Stove in use",
caption="Density distribution of Si7021 temperature for the two activity states across all SUM") +
geom_vline(aes(xintercept=mean(si7021Temp[inUse1==FALSE])), color="red", linetype="dashed") +
geom_vline(aes(xintercept=mean(si7021Temp[inUse1==TRUE])), color="turquoise", linetype="dashed") +
scale_x_continuous(breaks = SCALE_Si7021)
# Check for all 4 cases
ggplot(sum_total, aes(x=si7021Temp)) + geom_density(aes(color=inUse2)) + THEME +
labs(x="Temperature (Celsius)", y = "Probability density", color="Stove in use",
caption="Density distribution of Si7021 temperature for the two activity states across all SUM") +
geom_vline(aes(xintercept=mean(si7021Temp[inUse2==FALSE])), color="red", linetype="dashed") +
geom_vline(aes(xintercept=mean(si7021Temp[inUse2==TRUE])), color="turquoise", linetype="dashed") +
scale_x_continuous(breaks = SCALE_Si7021)
# Check for all 4 cases
ggplot(sum_total, aes(x=si7021Temp)) + geom_density(aes(color=inUse3)) + THEME +
labs(x="Temperature (Celsius)", y = "Probability density", color="Stove in use",
caption="Density distribution of Si7021 temperature for the two activity states across all SUM") +
geom_vline(aes(xintercept=mean(si7021Temp[inUse3==FALSE])), color="red", linetype="dashed") +
geom_vline(aes(xintercept=mean(si7021Temp[inUse3==TRUE])), color="turquoise", linetype="dashed") +
scale_x_continuous(breaks = SCALE_Si7021)
# Check for all 4 cases
ggplot(sum_total, aes(x=si7021Temp)) + geom_density(aes(color=inUse4)) + THEME +
labs(x="Temperature (Celsius)", y = "Probability density", color="Stove in use",
caption="Density distribution of Si7021 temperature for the two activity states across all SUM") +
geom_vline(aes(xintercept=mean(si7021Temp[inUse4==FALSE])), color="red", linetype="dashed") +
geom_vline(aes(xintercept=mean(si7021Temp[inUse4==TRUE])), color="turquoise", linetype="dashed") +
scale_x_continuous(breaks = SCALE_Si7021)
plot(sum_total$thermocoupleTemp)
plot(sum_total$thermocoupleTemp[sum_total$inUse1=="TRUE"])
plot(sum_total$thermocoupleTemp, color="inUse")
sum_total <- sum_total %>% group_by(id) %>%
mutate(raw_temp_diff = c(0, diff(thermocoupleTemp)),
raw_temp_rate = c(0, diff(thermocoupleTemp)/(diff(time)/60)))
warnings()
View(sum_total)
sum_total <- as.data.frame(sum_total)
# K-means using raw thermocouple data
cluster <- kmeans(sum_total[,2], 2)$cluster
sum_total <- sum_total %>% mutate(cluster5 = cluster,
inUse5 = ifelse((mean(thermocoupleTemp[cluster5==1]) > mean(thermocoupleTemp[cluster5==2]) &
cluster5==1) |
(mean(thermocoupleTemp[cluster5==2]) > mean(thermocoupleTemp[cluster5==1]) &
cluster5==2), TRUE, FALSE))
colnames(sum_total)
# K-means using raw thermocouple data and rate of change
cluster <- kmeans(sum_total[,c(2,23)], 2)$cluster
sum_total <- sum_total %>% mutate(cluster6 = cluster,
inUse6 = ifelse((mean(thermocoupleTemp[cluster6==1]) > mean(thermocoupleTemp[cluster6==2]) &
cluster6==1) |
(mean(thermocoupleTemp[cluster6==2]) > mean(thermocoupleTemp[cluster6==1]) &
cluster6==2), TRUE, FALSE))
sum_total <- sum_total %>% mutate(cluster7 = cluster,
inUse7 = ifelse((mean(thermocoupleTemp[cluster7==1]) > mean(thermocoupleTemp[cluster7==2]) &
cluster7==1) |
(mean(thermocoupleTemp[cluster7==2]) > mean(thermocoupleTemp[cluster7==1]) &
cluster7==2), TRUE, FALSE))
# K-means using raw thermocouple data, rate of change and diff between consecutive values
cluster <- kmeans(sum_total[,c(2,22, 23)], 2)$cluster
sum_total <- sum_total %>% mutate(cluster8 = cluster,
inUse8 = ifelse((mean(thermocoupleTemp[cluster8=1]) > mean(thermocoupleTemp[cluster8==2]) &
cluster8==1) |
(mean(thermocoupleTemp[cluster8==2]) > mean(thermocoupleTemp[cluster8==1]) &
cluster8==2), TRUE, FALSE))
sum_sub_id <- sum_total[sum_total$id=="SUM_17" & sum_total$DATE=="2019-10-04", ]
# Get timestamp where state change has been detected
indexes1 <- sum_sub_id$timestamp[which(sum_sub_id$inUse1 != lag(sum_sub_id$inUse1))]
indexes2 <- sum_sub_id$timestamp[which(sum_sub_id$inUse2 != lag(sum_sub_id$inUse2))]
indexes3 <- sum_sub_id$timestamp[which(sum_sub_id$inUse3 != lag(sum_sub_id$inUse3))]
indexes4 <- sum_sub_id$timestamp[which(sum_sub_id$inUse4 != lag(sum_sub_id$inUse4))]
indexes5 <- sum_sub_id$timestamp[which(sum_sub_id$inUse5 != lag(sum_sub_id$inUse5))]
indexes6 <- sum_sub_id$timestamp[which(sum_sub_id$inUse6 != lag(sum_sub_id$inUse6))]
indexes7 <- sum_sub_id$timestamp[which(sum_sub_id$inUse7 != lag(sum_sub_id$inUse7))]
indexes8 <- sum_sub_id$timestamp[which(sum_sub_id$inUse8 != lag(sum_sub_id$inUse8))]
ggplot(sum_sub_id, aes(x=timestamp)) + geom_line(aes(y=thermocoupleTemp, color="Raw", linetype="Raw")) +
geom_line(aes(y=smoothedTemp, color="Smoothed",linetype="Smoothed")) +
geom_vline(xintercept=indexes1, linetype="dashed", color="blue") +
geom_vline(xintercept=indexes2, linetype="dashed", color="green") +
geom_vline(xintercept=indexes3, linetype="dashed", color="purple") +
geom_vline(xintercept=indexes4, linetype="dashed", color="pink") +
geom_vline(xintercept=indexes5, linetype="dashed", color="yellow") +
geom_vline(xintercept=indexes6, linetype="dashed", color="orange") +
geom_vline(xintercept=indexes7, linetype="dashed", color="red") +
geom_vline(xintercept=indexes8, linetype="dashed", color="lilac") +
labs(y="Temperature (Celsius)", x = "Time of day", colour="Temperature", linetype="Temperature",
caption="Raw and smoothed thermocouple data for SUM 17 marked with instances of stove use on a random day of study") + scale_y_continuous(breaks=SCALE_THERM) + THEME
ggplot(sum_sub_id, aes(x=timestamp)) + geom_line(aes(y=thermocoupleTemp, color="Raw", linetype="Raw")) +
geom_line(aes(y=smoothedTemp, color="Smoothed",linetype="Smoothed")) +
geom_vline(xintercept=indexes5, linetype="dashed", color="yellow") +
geom_vline(xintercept=indexes6, linetype="dashed", color="orange") +
geom_vline(xintercept=indexes7, linetype="dashed", color="red") +
geom_vline(xintercept=indexes8, linetype="dashed", color="lilac") +
labs(y="Temperature (Celsius)", x = "Time of day", colour="Temperature", linetype="Temperature",
caption="Raw and smoothed thermocouple data for SUM 17 marked with instances of stove use on a random day of study") + scale_y_continuous(breaks=SCALE_THERM) + THEME
library(fpc)
install.packages("fpc")
install.packages(factoextra)
install.packages("factoextra")
library(fpc)
install.packages("fpc")
install.packages("mclust")
library(dbscan)
library(factoextra)
# Obtaining optimal eps value
new <- data(iris[,1:4])
# Obtaining optimal eps value
new <- data("iris")
data("iris")
# Obtaining optimal eps value
data("iris")
new <- iris[,-5]
install.packages("fpc")
setwd("~/github-kriti1717/Rwanda_SL/HEED_Rwanda_SL/Scripts")
library(here)
#******************************************************************************************#
# Set working directory
filepath <- "Data"
#******************************************************************************************#
# Read SL and weather data between July to April
sl_all <- read.csv(here(filepath,"sl_all_raw.csv"), header = TRUE, stringsAsFactors = FALSE)
sl_all <- sl_all %>%
mutate(Solar.Charger.PV.power.W = Solar.Charger.PV.current * Solar.Charger.PV.voltage,
timestamp = as.POSIXct(timestamp, origin="1970-01-01",tz="GMT"),
date = date(timestamp), month=as.character(month(timestamp, label=TRUE, abbr=TRUE)))
#******************************************************************************************#
# Importing libraries
library(tidyverse)
library(lubridate)
sl_all <- sl_all %>%
mutate(Solar.Charger.PV.power.W = Solar.Charger.PV.current * Solar.Charger.PV.voltage,
timestamp = as.POSIXct(timestamp, origin="1970-01-01",tz="GMT"),
date = date(timestamp), month=as.character(month(timestamp, label=TRUE, abbr=TRUE)))
output_dir <- "Data/Supplementary data"
#******************************************************************************************#
# Read SL and weather data between July to April
sl_all <- read.csv(here(filepath,"sl_all_raw.csv"), header = TRUE, stringsAsFactors = FALSE)
sl_all <- sl_all %>%
mutate(Solar.Charger.PV.power.W = Solar.Charger.PV.current * Solar.Charger.PV.voltage,
timestamp = as.POSIXct(timestamp, origin="1970-01-01",tz="GMT"),
date = date(timestamp)))
sl_all <- sl_all %>%
mutate(Solar.Charger.PV.power.W = Solar.Charger.PV.current * Solar.Charger.PV.voltage,
timestamp = as.POSIXct(timestamp, origin="1970-01-01",tz="GMT"),
date = date(timestamp))
sl_all <- sl_all[,-c(9:10)] # Remove PV current and PV voltage
colnames(sl_all)
# Remove extra columns
sl_all <- sl_all[,c(4,5,6,8,11)]
colnames(sl_all)
#******************************************************************************************#
# Read SL and weather data between July to April
sl_all <- read.csv(here(filepath,"sl_all_raw.csv"), header = TRUE, stringsAsFactors = FALSE)
sl_all <- sl_all %>%
mutate(Solar.Charger.PV.power.W = Solar.Charger.PV.current * Solar.Charger.PV.voltage,
timestamp = as.POSIXct(timestamp, origin="1970-01-01",tz="GMT"),
date = date(timestamp))
# Remove extra columns
sl_all <- sl_all[,-c(4,5,6,8,11)]
colnames(sl_all)
#******************************************************************************************#
# Read SL and weather data between July to April
sl_all <- read.csv(here(filepath,"sl_all_raw.csv"), header = TRUE, stringsAsFactors = FALSE)
sl_all <- sl_all %>%
mutate(Solar.Charger.PV.power.W = Solar.Charger.PV.current * Solar.Charger.PV.voltage,
timestamp = as.POSIXct(timestamp, origin="1970-01-01",tz="GMT"),
date = date(timestamp))
colnames(sl_all)
# Remove extra columns
sl_all <- sl_all[,-c(4:6,8:10,13)]
colnames(sl_all)
# Subset data till 31st March 2020
sl_all <- sl_all[sl_all$date<="2020-03-31",]
sl_all <- distinct(sl_all)
colnames(sl_all)
# Remove date
sl_all <- sl_all[,-8]
# Rename columns
colnames(sl_all) <- c("Timestamp", "Streetlight", "Battery.Monitor.State.of.Charge",
"Solar.Charger.Battery.Power.W", "System.Overview.AC.Consumption.W",
"System.Overview.Battery.Power.W", "Solar.Charger.PV.Power.W", "Date")
# Rename columns
colnames(sl_all) <- c("Timestamp", "Streetlight", "Battery.Monitor.State.of.Charge",
"Solar.Charger.Battery.Power.W", "System.Overview.AC.Consumption.W",
"System.Overview.Battery.Power.W", "Solar.Charger.PV.Power.W")
colnames(sl_all)
# Re-arrange columns
sl_all <- sl_all[,c(1,2,3,4,7,5,6)]
unique(sl_all$Streetlight)
#******************************************************************************************#
# Save data for each SL
sl <- sl_all[sl_all$Streetlight=="SL1", -2] #SL1
sl <- sl[order(sl$Timestamp),]
write.csv(sl, file=here(output_dir,"SL1.csv"), row.names=FALSE)
sl <- sl_all[sl_all$Streetlight=="SL2", -2] #SL2
sl <- sl[order(sl$Timestamp),]
write.csv(sl, file=here(output_dir,"SL2.csv"), row.names=FALSE)
sl <- sl_all[sl_all$Streetlight=="SL3", -2] #SL3
sl <- sl[order(sl$Timestamp),]
write.csv(sl, file=here(output_dir,"SL3.csv"), row.names=FALSE)
sl <- sl_all[sl_all$Streetlight=="SL4", -2] #SL4
sl <- sl[order(sl$Timestamp),]
write.csv(sl, file=here(output_dir,"SL4.csv"), row.names=FALSE)
setwd("~/github-kriti1717/Nepal_SL/HEED_Nepal_SL/Scripts")
#******************************************************************************************#
# Importing libraries
library(tidyverse)
library(lubridate)
library(here)
#******************************************************************************************#
# Set working directory
filepath <- "Data/Supplementary data"
#******************************************************************************************#
# Read SL data between July 2019 and March 2020, subset data and re arrange columns
sl_all <- read.csv(here(filepath,"sl_all_raw_jul19_mar20.csv"), header = TRUE, stringsAsFactors = FALSE)
#******************************************************************************************#
# Read SL data between July 2019 and March 2020, subset data and re arrange columns
sl_nepal <- read_csv(here(filepath,"sl_all_raw_jul19_mar20.csv"), col_names = TRUE)
sl_nepal <- as.data.frame(sl_nepal[,seq_along(sl_nepal)])
sl_nepal <- sl_nepal %>% mutate(date=date(timestamp))
colnames(sl)
colnames(sl_nepal)
# Remove extra columns
sl_nepal <- sl_nepal[,-c(5,7)]
# Subset data till 31st March 2020
sl_nepal <- sl_nepal[sl_nepal$date<="2020-03-31",]
sl_nepal <- distinct(sl_nepal)
# Remove date
sl_nepal <- sl_nepal[,-7]
colnames(sl_nepal)
# Rename columns
colnames(sl_nepal) <- c("Timestamp", "Streetlight", "Battery.Monitor.State.of.Charge",
"Solar.Charger.Battery.Power.W", "System.Overview.Battery.Power.W",
"Solar.Charger.PV.Power.W")
colnames(sl)
colnames(sl_nepal)
# Re-arrange columns
sl_nepal <- sl_nepal[,c(1:4,6,5)]
#******************************************************************************************#
# Read SL data between July 2019 and March 2020, subset data and re arrange columns
sl_nepal <- read_csv(here(filepath,"sl_all_raw_jul19_mar20.csv"), col_names = TRUE)
sl_nepal <- as.data.frame(sl_nepal[,seq_along(sl_nepal)])
sl_nepal <- sl_nepal %>% mutate(date=date(timestamp))
# Remove extra columns
sl_nepal <- sl_nepal[,-c(5,7)]
# Subset data till 31st March 2020
sl_nepal <- sl_nepal[sl_nepal$date<="2020-03-31",]
sl_nepal <- distinct(sl_nepal)
# Remove date
sl_nepal <- sl_nepal[,-7]
# Rename columns
colnames(sl_nepal) <- c("Timestamp", "Streetlight", "Battery.Monitor.State.of.Charge",
"Solar.Charger.Battery.Power.W", "System.Overview.Battery.Power.W",
"Solar.Charger.PV.Power.W")
# Re-arrange columns
sl_nepal <- sl_nepal[,c(1:4,6,5)]
# Re-arrange columns
sl_all <- sl_nepal[,c(1:4,6,5)]
#******************************************************************************************#
# Read SL data between July 2019 and March 2020, subset data and re arrange columns
sl_nepal <- read_csv(here(filepath,"sl_all_raw_jul19_mar20.csv"), col_names = TRUE)
sl_nepal <- as.data.frame(sl_nepal[,seq_along(sl_nepal)])
sl_nepal <- sl_nepal %>% mutate(date=date(timestamp))
# Remove extra columns
sl_nepal <- sl_nepal[,-c(5,7)]
# Subset data till 31st March 2020
sl_nepal <- sl_nepal[sl_nepal$date<="2020-03-31",]
sl_nepal <- distinct(sl_nepal)
# Remove date
sl_nepal <- sl_nepal[,-7]
# Rename columns
colnames(sl_nepal) <- c("Timestamp", "Streetlight", "Battery.Monitor.State.of.Charge",
"Solar.Charger.Battery.Power.W", "System.Overview.Battery.Power.W",
"Solar.Charger.PV.Power.W")
# Re-arrange columns
sl_all <- sl_nepal[,c(1:4,6,5)]
unique(sl_all$Streetlight)
#******************************************************************************************#
# Save data for each SL
sl <- sl_all[sl_all$Streetlight=="SL1", -2] #SL1
sl <- sl[order(sl$Timestamp),]
write.csv(sl, file=here(filepath,"SL1.csv"), row.names=FALSE)
sl <- sl_all[sl_all$Streetlight=="SL2", -2] #SL2
sl <- sl[order(sl$Timestamp),]
write.csv(sl, file=here(filepath,"SL2.csv"), row.names=FALSE)
sl <- sl_all[sl_all$Streetlight=="SL3", -2] #SL3
sl <- sl[order(sl$Timestamp),]
write.csv(sl, file=here(filepath,"SL3.csv"), row.names=FALSE)
sl <- sl_all[sl_all$Streetlight=="SL4", -2] #SL4
sl <- sl[order(sl$Timestamp),]
write.csv(sl, file=here(filepath,"SL4.csv"), row.names=FALSE)
sl <- sl_all[sl_all$Streetlight=="SL5", -2] #SL5
sl <- sl[order(sl$Timestamp),]
write.csv(sl, file=here(filepath,"SL5.csv"), row.names=FALSE)
sl <- sl_all[sl_all$Streetlight=="SL6", -2] #SL6
sl <- sl[order(sl$Timestamp),]
write.csv(sl, file=here(filepath,"SL6.csv"), row.names=FALSE)
sl <- sl_all[sl_all$Streetlight=="SL7", -2] #SL7
sl <- sl[order(sl$Timestamp),]
write.csv(sl, file=here(filepath,"SL7.csv"), row.names=FALSE)
#******************************************************************************************#
# Save data for each SL
sl <- sl_all[sl_all$Streetlight=="SL1", -2] #SL1
sl <- sl[order(sl$Timestamp),]
sl <- sl_all[sl_all$Streetlight=="SL2", -2] #SL2
sl <- sl[order(sl$Timestamp),]
sl <- sl_all[sl_all$Streetlight=="SL3", -2] #SL3
sl <- sl_all[sl_all$Streetlight=="SL4", -2] #SL4
sl <- sl_all[sl_all$Streetlight=="SL5", -2] #SL5
sl <- sl_all[sl_all$Streetlight=="SL6", -2] #SL6
sl <- sl_all[sl_all$Streetlight=="SL7", -2] #SL7
